{"meta":{"title":"WangGJ's Blog","subtitle":"","description":"","author":"WangGuanjie","url":"http://example.com","root":"/"},"pages":[{"title":"分类","date":"2022-01-16T02:49:38.000Z","updated":"2022-01-16T02:51:02.366Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-01-16T03:00:19.000Z","updated":"2022-01-16T03:01:15.444Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Django","slug":"Django","date":"2022-10-25T08:08:37.000Z","updated":"2022-10-25T13:43:30.758Z","comments":true,"path":"2022/10/25/Django/","link":"","permalink":"http://example.com/2022/10/25/Django/","excerpt":"","text":"学习Django 1.安装Django1pip install django 123456789101112c:\\python39 - python.exe - Scripts - pip.exe - django-admin.exe 【工具，创建django项目中的文件和文件夹】 - Lib - 内置模块 - site-packages - openpyxl - python-docx - flask - django 【框架的源码】 2.创建Django项目2.1 通过命令行创建 打开终端。 进入某个目录（项目放在哪里）。 1/Users/wupeiqi/PycharmProjects/gx 执行命令创建项目 1&quot;c:\\python39\\Scripts\\django-admin.exe&quot; startproject 项目名称 123# 如果 c:\\python39\\Scripts 已加入环境系统环境变量。django-admin startproject 项目名称 2.2 通过PyCharm创建一开始创建project时勾选Django项目 特殊说明： 命令行，创建的项目是标准的。 pycharm，在标准的基础上默认给咱们加了点东西。 创建了一个templates目录【删除】 settings.py中【删除】 默认项目的文件介绍： 12345678mysite├── manage.py 【项目的管理，启动项目、创建app、数据管理】【不要动】【***常常用***】└── mysite ├── __init__.py ├── settings.py 【项目配置】 【***常常修改***】 ├── urls.py 【URL和函数的对应关系】【***常常修改***】 ├── asgi.py 【接收网络请求】【不要动】 └── wsgi.py 【接收网络请求】【不要动】 3.创建app123456789- 项目 - app，用户管理【表结构、函数、HTML模板、CSS】 - app，订单管理【表结构、函数、HTML模板、CSS】 - app，后台管理【表结构、函数、HTML模板、CSS】 - app，网站 【表结构、函数、HTML模板、CSS】 - app，API 【表结构、函数、HTML模板、CSS】 .. 一个app相当于一个功能模块 12345678910111213141516├── app01│ ├── __init__.py│ ├── admin.py 【固定，不用动】django默认提供了admin后台管理。│ ├── apps.py 【固定，不用动】app启动类│ ├── migrations 【固定，不用动】数据库变更记录│ │ └── __init__.py│ ├── models.py 【**重要**】，对数据库操作。│ ├── tests.py 【固定，不用动】单元测试│ └── views.py 【**重要**】，函数。├── manage.py└── mysite2 ├── __init__.py ├── asgi.py ├── settings.py ├── urls.py 【URL-&gt;函数】 └── wsgi.py 4.启动时的注意事项 确保app已经注册【setting.py】 编写URL和视图函数对应关系 【urls.py】 编写视图函数 【views.py】 启动django项目 4.1 编写一个html页面1- url -&gt; 函数 #url与函数一一对应 4.2 html页面放入到templates模板文件夹下，不同的app可以使用不同的模板（及静态文件）4.3 静态文件在开发过程中一般将： 图片 CSS js 都会当做静态文件处理。在app目录下创建static文件夹保存这些静态文件。引用静态文件 1&#123;% static %&#125; 5.模板语法本质上：在HTML中写一些占位符，由数据对这些占位符进行替换和处理。 6.请求和响应7.数据库操作 MySQL数据库 + pymysql 12345678910111213import pymysql# 1.连接MySQLconn = pymysql.connect(host=&quot;127.0.0.1&quot;, port=3306, user=&#x27;root&#x27;, passwd=&quot;root123&quot;, charset=&#x27;utf8&#x27;, db=&#x27;unicom&#x27;)cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)# 2.发送指令cursor.execute(&quot;insert into admin(username,password,mobile) values(&#x27;wupeiqi&#x27;,&#x27;qwe123&#x27;,&#x27;15155555555&#x27;)&quot;)conn.commit()# 3.关闭cursor.close()conn.close() Django开发操作数据库更简单，内部提供了ORM框架。 7.1 安装第三方模块1pip install mysqlclient 7.2 ORMORM可以帮助我们做两件事： 创建、修改、删除数据库中的表（不用你写SQL语句）。 【无法创建数据库】 操作表中的数据（不用写SQL语句）。 1. 自己创建数据库 启动MySQL服务 自带工具创建数据库 1create database db DEFAULT CHARSET utf8 COLLATE utf8_general_ci; 2. django连接数据库在settings.py文件中进行配置和修改。 12345678910DATABASES = &#123; &#x27;default&#x27;: &#123; &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;, &#x27;NAME&#x27;: &#x27;db&#x27;, # 数据库名字 &#x27;USER&#x27;: &#x27;root&#x27;, &#x27;PASSWORD&#x27;: &#x27;pwd&#x27;, &#x27;HOST&#x27;: &#x27;127.0.0.1&#x27;, # 本机 &#x27;PORT&#x27;: 3306, &#125;&#125; 3.django操作表 创建表 删除表 修改表 创建表：在models.py文件中 123456create table app01_userinfo( id bigint auto_increment primary key, name varchar(32), password varchar(64), age int) 执行命令： 12python3.9 manage.py makemigrationspython3.9 manage.py migrate 注意：app需要提前注册。 在表中新增列时，由于已存在列中可能已有数据，所以新增列必须要指定新增列对应的数据： 1，手动输入一个值。 设置默认值 1age = models.IntegerField(default=2) 允许为空 1data = models.IntegerField(null=True, blank=True) 以后在开发中如果想要对表结构进行调整： 在models.py文件中操作类即可。 命令 12python3.9 manage.py makemigrationspython3.9 manage.py migrate 4.表中的数据123456789101112131415161718192021222324252627# #### 1.新建 ##### 类名.objects.create(字段名=&quot;XXX&quot;)# #### 2.删除 ##### 类名.objects.filter(id=3).delete() # id=3的数据删除# 类名.objects.all().delete() # all删除# #### 3.获取数据 ##### 3.1 获取符合条件的所有数据# data_list = [对象,对象,对象] QuerySet类型# data_list = 类名.objects.all()# for obj in data_list:# print(obj.字段1, obj.字段2, obj.字段3……)# data_list = [对象,]# data_list = 类名.objects.filter(id=1)# print(data_list)# 3.1 获取第一条数据【对象】# row_obj = 类名.objects.filter(id=1).first()# print(row_obj.id, row_obj.name, row_obj.password, row_obj.age)# #### 4.更新数据 ##### 类名.objects.all().update(要更新的字段=&quot;新数据&quot;)# 类名.objects.filter(id=2).update(要更新的字段=&quot;新数据&quot;)","categories":[],"tags":[]},{"title":"测试","slug":"测试","date":"2022-01-17T15:51:20.000Z","updated":"2022-01-17T15:52:49.108Z","comments":true,"path":"2022/01/17/测试/","link":"","permalink":"http://example.com/2022/01/17/%E6%B5%8B%E8%AF%95/","excerpt":"","text":"aaaa bbbbb cccc aaaaaaa bdasbbbb cdasdcccfbv assaaadd bdvbbbbdfds cfdscccfcsdv awwaaazz bsbbbb cqccc","categories":[],"tags":[]},{"title":"Hexo使用next主题","slug":"Hexo使用next主题","date":"2022-01-17T13:15:59.000Z","updated":"2022-01-17T15:42:10.174Z","comments":true,"path":"2022/01/17/Hexo使用next主题/","link":"","permalink":"http://example.com/2022/01/17/Hexo%E4%BD%BF%E7%94%A8next%E4%B8%BB%E9%A2%98/","excerpt":"切换next主题","text":"切换next主题 前言将之前的yilia换为了next主题，许多重复的功能就不再介绍了，只介绍新加入的一些功能。 添加文章阅读结束标记具体实现在路径\\themes\\next\\layout\\_macro中新建passage-end-tag.swig文件,并添加以下内容: &lt;div&gt; &#123;% if not is_index %&#125; -------------本文结束感谢阅读------------- &#123;% endif %&#125; &lt;/div&gt; 接着打开\\themes\\next\\layout\\_macro\\post.swig文件，在post-body之后，post-footer之前添加如下代: &lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125; &lt;/div&gt; 然后打开主题配置文件_config.yml,在末尾添加 # 文章末尾添加“本文结束”标记 passage_end_tag: enabled: true","categories":[{"name":"Hexo博客","slug":"Hexo博客","permalink":"http://example.com/categories/Hexo%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"next","slug":"next","permalink":"http://example.com/tags/next/"}]},{"title":"Hexo博客主题配置及美化","slug":"Hexo博客主题配置及美化","date":"2022-01-14T12:20:27.000Z","updated":"2022-01-17T15:42:26.321Z","comments":true,"path":"2022/01/14/Hexo博客主题配置及美化/","link":"","permalink":"http://example.com/2022/01/14/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E5%8F%8A%E7%BE%8E%E5%8C%96/","excerpt":"yilia主题及其他功能的安装","text":"yilia主题及其他功能的安装 我选择了yilia作为自己博客的主题，yilia看起来简洁，而且使用起来十分方便，只需要进行简单的配置便可以使用。以下是yilia主题具体的配置使用步骤： 安装yilia： $ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 配置blog文件夹下的_config.yml：theme:yilia 根据文档配置yilia下的_config.yml 修改头像、QQ、微信打开你的项目根目录中blog-theme-yilia-source，在其中可添加一个assets文件夹，里面存放图片资源。然后打开blog-theme-yilia下的_config.yml文件，在其中配置： # SubNav subnav: github: &quot;https://github.com/dujiajianbing&quot; qq: &quot;/assets/qq.jpg&quot; weixin: &quot;/assets/wechat.jpg&quot; mail: &quot;mailto:wangguanjie1001@163.com&quot; #你的头像url avatar: /assets/head.jpg 字数统计和阅读时长安装 hexo-wordcount命令：npm i --save hexo-wordcount 配置文件在theme-yilia-layout-_partial-post目录下下创建word.ejs文件（ejs文件是什么还不清楚）。 &lt;div style=&quot;margin-top:10px;&quot;&gt; &lt;span class=&quot;post-time&quot;&gt; &lt;span class=&quot;post-meta-item-icon&quot;&gt; &lt;i class=&quot;fa fa-keyboard-o&quot;&gt;&lt;/i&gt; &lt;span class=&quot;post-meta-item-text&quot;&gt; 字数统计: &lt;/span&gt; &lt;span class=&quot;post-count&quot;&gt;&lt;%= wordcount(post.content) %&gt;字&lt;/span&gt; &lt;/span&gt; &lt;/span&gt; &lt;span class=&quot;post-time&quot;&gt; &amp;nbsp; | &amp;nbsp; &lt;span class=&quot;post-meta-item-icon&quot;&gt; &lt;i class=&quot;fa fa-hourglass-half&quot;&gt;&lt;/i&gt; &lt;span class=&quot;post-meta-item-text&quot;&gt; 阅读时长: &lt;/span&gt; &lt;span class=&quot;post-count&quot;&gt;&lt;%= min2read(post.content) %&gt;分&lt;/span&gt; &lt;/span&gt; &lt;/span&gt; &lt;/div&gt; 然后在theme-yilia-layout-_partial/article.ejs中添加 &lt;div class=&quot;article-inner&quot;&gt; &lt;% if (post.link || post.title)&#123; %&gt; &lt;header class=&quot;article-header&quot;&gt; &lt;%- partial(&#39;post/title&#39;, &#123;class_name: &#39;article-title&#39;&#125;) %&gt; &lt;% if (!post.noDate)&#123; %&gt; &lt;%- partial(&#39;post/date&#39;, &#123;class_name: &#39;archive-article-date&#39;, date_format: null&#125;) %&gt; &lt;!-- 需要添加的位置 --&gt; &lt;!-- 开始添加字数统计--&gt; &lt;% if(theme.word_count &amp;&amp; !post.no_word_count)","categories":[{"name":"Hexo博客","slug":"Hexo博客","permalink":"http://example.com/categories/Hexo%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"yilia","slug":"yilia","permalink":"http://example.com/tags/yilia/"}]},{"title":"Hexo博客的搭建","slug":"Hexo博客的搭建","date":"2022-01-14T06:08:54.000Z","updated":"2022-01-17T15:42:36.649Z","comments":true,"path":"2022/01/14/Hexo博客的搭建/","link":"","permalink":"http://example.com/2022/01/14/Hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%90%AD%E5%BB%BA/","excerpt":"搭建个人博客（Hexo+Github）","text":"搭建个人博客（Hexo+Github） Hexo作为热门的框架，有很多程序员选择使用Hexo搭建自己的博客。使用Hexo+Github，将博客部署到云端服务器上，节约了自己维护的时间，更加方便高效。 准备环境需要提前下载NodeJS和Git，注意版本兼容问题。 node -v 查看Node的版本 git -version 查看Git版本 安装Hexo需要用到npm工具，但国内npm的速度慢，可以考虑使用淘宝镜像cnpm，速度更快 先创建一个空文件夹，用来存放博客的所有文件。 安装hexo：npm i -g hexo 安装好以后可以用hexo -v查看版本 初始化：hexo init 启动本地博客：hexo s/hexo server 本地访问地址：http://localhost:4000/本地博客就创建好了，接下来需要把它部署到Github上。 部署Github部署到Github上更方便管理，也可以向别人展示自己的博客。 首先需要创建GitHub账号。 在Github上创建一个新仓库，仓库名字格式统一：YourGitHubName.github.io，否则博客会出错。 在blog目录下安装Git部署插件：cnpm install –save hexo-deployer-git 配置_config.yml # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy: type: git repo: https://github.com/YourGithubName/YourGithubName.github.io.git branch: master 这里我一开始使用了http方式部署，但一直出错，后来更换为了ssh方式就好了，具体原因暂时还没有搞懂。在用ssh方式的时候，要先配置ssh密钥，否则会出现连接错误的问题。 检查是否有SSH Key。 若没有,生成一个新的SSH Key：$ ssh-keygen -t rsa -C &quot;email@github.com&quot; #github注册的邮箱 将SSH Key添加到Github上，把id_rsa.pub公钥的内容复制进去就可以了。 将本地博客部署到Github上依次使用如下命令，即可将本地博客推到GitHub上。 hexo clean #清理一下 hexo generate/hexo g #生成 hexo deploy/hexo d #部署到远程Github仓库 等待一会后，可以通过访问https://YourGithubName.github.io/来查看博客。 博客搭建完成！但还有许多功能需要完善，这篇博客中没有图片说明，显得单调，还有博客的美化等问题，我还需要进一步学习。","categories":[{"name":"Hexo博客","slug":"Hexo博客","permalink":"http://example.com/categories/Hexo%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"}]}],"categories":[{"name":"Hexo博客","slug":"Hexo博客","permalink":"http://example.com/categories/Hexo%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"next","slug":"next","permalink":"http://example.com/tags/next/"},{"name":"yilia","slug":"yilia","permalink":"http://example.com/tags/yilia/"}]}