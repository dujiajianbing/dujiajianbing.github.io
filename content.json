{"meta":{"title":"WangGJ's Blog","subtitle":"","description":"","author":"WangGuanjie","url":"http://example.com","root":"/"},"pages":[{"title":"分类","date":"2022-01-16T02:49:38.000Z","updated":"2022-01-16T02:51:02.366Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-01-16T03:00:19.000Z","updated":"2022-01-16T03:01:15.444Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"用户管理","slug":"用户管理","date":"2022-10-26T10:16:24.000Z","updated":"2022-11-09T08:15:41.638Z","comments":true,"path":"2022/10/26/用户管理/","link":"","permalink":"http://example.com/2022/10/26/%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/","excerpt":"","text":"案例：用户管理主要就是对数据库的增删改查，查找数据通过之后的Form实现。 1.数据增加 2.数据罗列 3.数据删除 4.Form与ModelForm123456789101112131415161718def user_model_form_add(request): &quot;&quot;&quot; 添加用户（ModelForm版本）&quot;&quot;&quot; if request.method == &quot;GET&quot;: form = UserModelForm() return render(request, &#x27;user_model_form_add.html&#x27;, &#123;&quot;form&quot;: form&#125;) # 用户POST提交数据，数据校验。 form = UserModelForm(data=request.POST) if form.is_valid(): # 如果数据合法，保存到数据库 # &#123;&#x27;name&#x27;: &#x27;123&#x27;, &#x27;password&#x27;: &#x27;123&#x27;, &#x27;age&#x27;: 11, &#x27;account&#x27;: Decimal(&#x27;0&#x27;), &#x27;create_time&#x27;: datetime.datetime(2011, 11, 11, 0, 0, tzinfo=&lt;UTC&gt;), &#x27;gender&#x27;: 1, &#x27;depart&#x27;: &lt;Department: IT运维部门&gt;&#125; # print(form.cleaned_data) # models.UserInfo.objects.create(..) form.save() return redirect(&#x27;/user/list/&#x27;) # 校验失败（在页面上显示错误信息） return render(request, &#x27;user_model_form_add.html&#x27;, &#123;&quot;form&quot;: form&#125;) 使用ModelForm时，views里也要新建一个类 1234567891011121314151617181920class UserModelForm(forms.ModelForm): name = forms.CharField(min_length=3, label=&quot;用户名&quot;) class Meta: model = models.UserInfo fields = [&quot;name&quot;, &quot;password&quot;, &quot;age&quot;, &#x27;account&#x27;, &#x27;create_time&#x27;, &quot;gender&quot;, &quot;depart&quot;] # widgets = &#123; # &quot;name&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;&#125;), # &quot;password&quot;: forms.PasswordInput(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;&#125;), # &quot;age&quot;: forms.TextInput(attrs=&#123;&quot;class&quot;: &quot;form-control&quot;&#125;), # &#125; def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) # 循环找到所有的插件，添加了class=&quot;form-control&quot; for name, field in self.fields.items(): # 给每个字段加样式 # if name == &quot;password&quot;: # field.widget.attrs = &#123;&quot;type&quot;: &quot;password&quot;, &quot;placeholder&quot;: field.label, &quot;size&quot;: &quot;60&quot;&#125; # continue # 改变个别字段的样式可以写个if field.widget.attrs = &#123;&quot;class&quot;: &quot;form-control&quot;, &quot;placeholder&quot;: field.label&#125; class Meta里的fields可以直接显示user表里的字段，也可以在定义class最开始加入新的字段，显示的样式可以用widget里标明。ModelForm和Form的区别就是前者有class Meta，开发时比较方便。 进行信息编辑时，如果想在网页上显示默认值，需要加一个instance通过靓号管理模块，掌握ModelForm，分页组件，BootStrap父类等写ModelForm类时，有一个小问题，对应的html页面是根据ModelForm对象自动生成的网页标签，本来是不能加上css，js的样式的，需要我们进行手动修改。加一个循环，给每个field加上样式。我们可以自定义一个BootStrap类，改成继承BootStrap自定义类 1234567891011121314class BootStrapModelForm(forms.ModelForm): def __init__(self, *args, **kwargs): super().__init__(*args, **kwargs) # 循环ModelForm中的所有字段，给每个字段的插件设置 for name, field in self.fields.items(): # 字段中有属性，保留原来的属性，没有属性，才增加。 if field.widget.attrs: field.widget.attrs[&quot;class&quot;] = &quot;form-control&quot; field.widget.attrs[&quot;placeholder&quot;] = field.label else: field.widget.attrs = &#123; &quot;class&quot;: &quot;form-control&quot;, &quot;placeholder&quot;: field.label &#125; 1234class UserEditModelForm(BootStrapModelForm): class Meta: model = models.UserInfo fields = [&quot;name&quot;, &quot;password&quot;, &quot;age&quot;,] 在添加新数据时，我们可以对新添加的数据进行验证，导入ValidationError，RegexValidator（正则表达式，验证输入的手机号是否符合格式）不允许手机号重复。 添加：【正则表达式】【手机号不能存在】 1234567# [obj,obj,obj]queryset = models.PrettyNum.objects.filter(mobile=&quot;1888888888&quot;)obj = models.PrettyNum.objects.filter(mobile=&quot;1888888888&quot;).first()# True/Falseexists = models.PrettyNum.objects.filter(mobile=&quot;1888888888&quot;).exists() 编辑：【正则表达式】【手机号不能存在】 1234排除自己以外，其他的数据是否手机号是否重复？# id!=2 and mobile=&#x27;1888888888&#x27;models.PrettyNum.objects.filter(mobile=&quot;1888888888&quot;).exclude(id=2) 分页组件 pagination.py小bug：搜索+分页时，不能保留原来的搜索条件，可以用request.get得到url中有的query_dict，然后拼接url（urlencode），加上?page=xxx。 时间插件模板上留出css和js的位置 再在对应的页面加上时间插件，代码如下： 12345678910111213141516171819202122232425&lt;link rel=&quot;stylesheet&quot; href=&quot;static/plugins/bootstrap-3.4.1/css/bootstrap.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;static/plugins/bootstrap-datepicker/css/bootstrap-datepicker.css&quot;&gt;&lt;input type=&quot;text&quot; id=&quot;dt&quot; class=&quot;form-control&quot; placeholder=&quot;入职日期&quot;&gt;&lt;script src=&quot;static/js/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;static/plugins/bootstrap-3.4.1/js/bootstrap.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;static/plugins/bootstrap-datepicker/js/bootstrap-datepicker.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;static/plugins/bootstrap-datepicker/locales/bootstrap-datepicker.zh-CN.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; $(function () &#123; $(&#x27;#dt&#x27;).datepicker(&#123; format: &#x27;yyyy-mm-dd&#x27;, startDate: &#x27;0&#x27;, language: &quot;zh-CN&quot;, autoclose: true &#125;); &#125;)&lt;/script&gt; 管理员的管理：密码的保存，使用md5加密，数据库中保存的是密文。重置密码功能：先通过id找到数据库中的密码，检查修改后的密码和之前保存的密码是否相同，如果相同则不可以修改（修改的密码不能和上次的密码一样）","categories":[{"name":"Django学习","slug":"Django学习","permalink":"http://example.com/categories/Django%E5%AD%A6%E4%B9%A0/"}],"tags":[]},{"title":"Django","slug":"Django","date":"2022-10-25T08:08:37.000Z","updated":"2022-10-26T11:28:08.633Z","comments":true,"path":"2022/10/25/Django/","link":"","permalink":"http://example.com/2022/10/25/Django/","excerpt":"","text":"1.安装Django1pip install django 123456789101112c:\\python39 - python.exe - Scripts - pip.exe - django-admin.exe 【工具，创建django项目中的文件和文件夹】 - Lib - 内置模块 - site-packages - openpyxl - python-docx - flask - django 【框架的源码】 2.创建Django项目2.1 通过命令行创建 打开终端。 进入某个目录（项目放在哪里）。 1/Users/wupeiqi/PycharmProjects/gx 执行命令创建项目 1&quot;c:\\python39\\Scripts\\django-admin.exe&quot; startproject 项目名称 123# 如果 c:\\python39\\Scripts 已加入环境系统环境变量。django-admin startproject 项目名称 2.2 通过PyCharm创建一开始创建project时勾选Django项目 特殊说明： 命令行，创建的项目是标准的。 pycharm，在标准的基础上默认给咱们加了点东西。 创建了一个templates目录【删除】 settings.py中【删除】 默认项目的文件介绍： 12345678mysite├── manage.py 【项目的管理，启动项目、创建app、数据管理】【不要动】【***常常用***】└── mysite ├── __init__.py ├── settings.py 【项目配置】 【***常常修改***】 ├── urls.py 【URL和函数的对应关系】【***常常修改***】 ├── asgi.py 【接收网络请求】【不要动】 └── wsgi.py 【接收网络请求】【不要动】 3.创建app 123456789- 项目 - app，用户管理【表结构、函数、HTML模板、CSS】 - app，订单管理【表结构、函数、HTML模板、CSS】 - app，后台管理【表结构、函数、HTML模板、CSS】 - app，网站 【表结构、函数、HTML模板、CSS】 - app，API 【表结构、函数、HTML模板、CSS】 .. 一个app相当于一个功能模块 12345678910111213141516├── app01│ ├── __init__.py│ ├── admin.py 【固定，不用动】django默认提供了admin后台管理。│ ├── apps.py 【固定，不用动】app启动类│ ├── migrations 【固定，不用动】数据库变更记录│ │ └── __init__.py│ ├── models.py 【**重要**】，对数据库操作。│ ├── tests.py 【固定，不用动】单元测试│ └── views.py 【**重要**】，函数。├── manage.py└── mysite2 ├── __init__.py ├── asgi.py ├── settings.py ├── urls.py 【URL-&gt;函数】 └── wsgi.py 4.启动时的注意事项 确保app已经注册【setting.py】 编写URL和视图函数对应关系 【urls.py】 编写视图函数 【views.py】 启动django项目1python managepy runserver 4.1 编写一个html页面1- url -&gt; 函数 #url与函数一一对应 4.2 html页面放入到templates模板文件夹下，不同的app可以使用不同的模板（及静态文件）4.3 静态文件在开发过程中一般将： 图片 CSS js 都会当做静态文件处理。在app目录下创建static文件夹保存这些静态文件。引用静态文件 1&#123;% load static %&#125; 5.模板语法本质上：在HTML中写一些占位符，由数据对这些占位符进行替换和处理。 6.请求和响应GET请求和POST请求 响应123HttpResponse(&quot;响应的信息&quot;)render(request,&quot;html,参数)redirect(html) #重定向 7.数据库操作 MySQL数据库 + pymysql 12345678910111213import pymysql# 1.连接MySQLconn = pymysql.connect(host=&quot;127.0.0.1&quot;, port=3306, user=&#x27;root&#x27;, passwd=&quot;root123&quot;, charset=&#x27;utf8&#x27;, db=&#x27;unicom&#x27;)cursor = conn.cursor(cursor=pymysql.cursors.DictCursor)# 2.发送指令cursor.execute(&quot;insert into admin(username,password,mobile) values(&#x27;wgj&#x27;,&#x27;123&#x27;,&#x27;12345678912&#x27;)&quot;)conn.commit()# 3.关闭cursor.close()conn.close() Django开发操作数据库更简单，内部提供了ORM框架。 7.1 安装第三方模块1pip install mysqlclient 7.2 ORMORM可以帮助我们做两件事： 创建、修改、删除数据库中的表（不用你写SQL语句）。 【无法创建数据库】 操作表中的数据（不用写SQL语句）。 1. 自己创建数据库 启动MySQL服务 自带工具创建数据库 1create database db DEFAULT CHARSET utf8 COLLATE utf8_general_ci; 2. django连接数据库在settings.py文件中进行配置和修改。 12345678910DATABASES = &#123; &#x27;default&#x27;: &#123; &#x27;ENGINE&#x27;: &#x27;django.db.backends.mysql&#x27;, &#x27;NAME&#x27;: &#x27;db&#x27;, # 数据库名字 &#x27;USER&#x27;: &#x27;root&#x27;, &#x27;PASSWORD&#x27;: &#x27;136331&#x27;, &#x27;HOST&#x27;: &#x27;127.0.0.1&#x27;, # 本机 &#x27;PORT&#x27;: 3306, &#125;&#125; 3.django操作表 创建表 删除表 修改表 创建表：在models.py文件中 1234class UserInfo(models.Model): name = models.CharField(max_length=32) password = models.CharField(max_length=64) age = models.IntegerField 相当于在mysql中执行如下语句： 123456create table app01_userinfo( id bigint auto_increment primary key, name varchar(32), password varchar(64), age int) 执行命令： 12python3.9 manage.py makemigrationspython3.9 manage.py migrate 注意：app需要提前注册。 在表中新增列时，由于已存在列中可能已有数据，所以新增列必须要指定新增列对应的数据： 1，手动输入一个值。 设置默认值 1age = models.IntegerField(default=2) 允许为空 1data = models.IntegerField(null=True, blank=True) 以后在开发中如果想要对表结构进行调整： 在models.py文件中操作类即可。 命令 1python3.9 manage.py makemigrations 1python3.9 manage.py migrate 4.表中的数据123456789101112131415161718192021222324252627# #### 1.新建 ##### 类名.objects.create(字段名=&quot;XXX&quot;)# #### 2.删除 ##### 类名.objects.filter(id=3).delete() # id=3的数据删除# 类名.objects.all().delete() # all删除# #### 3.获取数据 ##### 3.1 获取符合条件的所有数据# data_list = [对象,对象,对象] QuerySet类型# data_list = 类名.objects.all()# for obj in data_list:# print(obj.字段1, obj.字段2, obj.字段3……)# data_list = [对象,]# data_list = 类名.objects.filter(id=1)# print(data_list)# 3.1 获取第一条数据【对象】# row_obj = 类名.objects.filter(id=1).first()# print(row_obj.id, row_obj.name, row_obj.password, row_obj.age)# #### 4.更新数据 ##### 类名.objects.all().update(要更新的字段=&quot;新数据&quot;)# 类名.objects.filter(id=2).update(要更新的字段=&quot;新数据&quot;)","categories":[{"name":"Django学习","slug":"Django学习","permalink":"http://example.com/categories/Django%E5%AD%A6%E4%B9%A0/"}],"tags":[]}],"categories":[{"name":"Django学习","slug":"Django学习","permalink":"http://example.com/categories/Django%E5%AD%A6%E4%B9%A0/"}],"tags":[]}